{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#data-475-advanced-concepts-in-data-analytics","title":"DATA 475 - Advanced Concepts in Data Analytics","text":"<p>Part of Data Analytics certificate at SAIT<sup>1</sup></p> <p>This community page will display step-by-step instructions for setting up your machine, along with answers to commonly asked questions.</p> <ol> <li> <p>SAIT: the Southern Alberta Institute of Technology\u00a0\u21a9</p> </li> </ol>"},{"location":"extra/","title":"Extra Resources","text":"<p>A list of helpful resources</p> City of Calgary\u2019s Open Data Portal <p>The City of Calgary\u2019s Open Data Portal is a platform that provides free and easy access to many categorized datasets. The data is relevant, accurate, and detailed, and is shared in a timely manner. This helps data users conduct analysis and evaluation that inform planning and implementation of policies, programs, and decisions. The portal allows users to browse, download, and innovate with the data.</p> Kattis Problem Archive <p>Open Kattis is a platform that offers thousands of programming problems to solve. It is a public version of the Kattis contest management system. The platform is designed to aid computer science courses and host prestigious competitions, like ICPC World Finals1. You can register, browse, and submit your solutions, and see the scores and rankings of other users and universities.</p> <p>Contribute to boost SAIT's ranking.</p> Kaggle <p>Kaggle is a data science competition platform and online community of data scientists and machine learning practitioners under Google LLC. Kaggle enables users to find and publish datasets, explore and build models in a web-based data science environment, work with other data scientists and machine learning engineers, and enter competitions to solve data science challenges. The platform offers thousands of programming problems to solve, and is used for learning, collaboration, job opportunities, community building, and research in the data science and machine learning fields.</p> <p>FYI, all descriptions are generated by Bing Chat with minimal human edits.</p>"},{"location":"faq/","title":"FAQ","text":"<p>A list of frequently asked questions</p>"},{"location":"faq/#virtual-environments","title":"Virtual Environments","text":"<p>Python virtual environments are a powerful tool that can help you manage dependencies and isolate your projects from one another. Here are some benefits of using virtual environments in Python:</p> <ol> <li> <p>Avoid system pollution: Virtual environments allow you to install packages and dependencies without affecting the system's global Python installation. This helps you avoid conflicts between different versions of packages and dependencies.</p> </li> <li> <p>Sidestep dependency conflicts: Virtual environments allow you to create isolated environments for each project, which means that you can have different versions of the same package installed in different environments without any conflicts.</p> </li> <li> <p>Minimize reproducibility issues: Virtual environments help you ensure that your code runs consistently across different machines and platforms. By creating an environment with the same dependencies as your project, you can ensure that your code will run the same way on different machines.</p> </li> <li> <p>Dodge installation privilege lockouts: Virtual environments allow you to install packages and dependencies without requiring administrator privileges. This can be especially useful if you're working on a shared machine or don't have administrator access.</p> </li> <li> <p>Enhanced collaboration: Virtual environments can help you collaborate with other developers more effectively. By sharing your virtual environment configuration files, you can ensure that everyone is using the same dependencies and versions of packages.</p> </li> </ol> <p>To use virtual environments in Python, you can use the built-in <code>venv</code> module or third-party tools like <code>virtualenv</code> or <code>conda</code>. You can create a new virtual environment for your project, activate it, and install packages into it. Once you're done working on your project, you can deactivate the environment and switch to a different one.</p>"},{"location":"faq/#requirementstxt","title":"requirements.txt","text":"<p>A <code>requirements.txt</code> file is a plain text file that lists the packages and libraries required for a Python project. It is used to specify the exact versions of these packages and libraries, making it easier to install, review, and reproduce the requirements of an environment. This file is usually stored in the root directory of the project and can be used to download all the packages at once with a pip command.</p> <p>For instance, if you have a Python project that uses a specific version of a package, you can list that package and its version in the requirements.txt file. When you share your project with others, they can install the same Python modules you have listed in your requirements file and run your project without any problems.</p> <p>To create a <code>requirements.txt</code> file, you can navigate to your Python project directory and create a new .txt document named <code>requirements.txt</code>. Then, add the names of the modules you would like to install, along with the required version, on separate lines. You can also generate a <code>requirements.txt</code> file directly from the command line with the following command:</p> <p><code>pip freeze &gt; requirements.txt</code></p>"},{"location":"faq/#use-manual-commands","title":"Use manual commands","text":"<p>Run the following commands in order to create a virtual environment.</p> <pre><code>python -m venv .venv\n.venv\\Scripts\\activate\npython -m pip install -U pip\npip install -r requirements.txt\n</code></pre>"},{"location":"faq/#use-vs-code","title":"Use VS Code","text":"<p>Make a change in the VS Code setting to enable the Create Environment... button. You only need to modify this setting once.</p> <p>Go to Manage then Settings</p> <p></p> <p>Type create env in the search bar then set Python &gt; Create Environment Content Button to show</p> <p></p> <p>For each new Python project, simply following the steps below.</p> <ol> <li> <p>Locate the <code>requirements.txt</code> file and the Create Environment... button on the bottom right.</p> <p></p> </li> <li> <p>Choose Venv.</p> <p></p> </li> <li> <p>Select your Python interpreter from the dropdown list.</p> <p></p> </li> <li> <p>Check the <code>requirements.txt</code> file and press OK</p> <p></p> </li> <li> <p>VS Code will handle the virtual environment creation behind the scene. It run the manual steps aforementioned.</p> <p></p> </li> <li> <p>After the virtual environment is created, VS Code also selects to use it automatically.</p> <p></p> </li> </ol>"},{"location":"faq/#ssl-error-when-using-fetch_openml","title":"SSL Error when using <code>fetch_openml</code>","text":"<p>Add the following two lines of code at the top of the Python script.</p> <p>See reference from StackOverflow.</p> <pre><code>import ssl\nssl._create_default_https_context = ssl._create_unverified_context\n</code></pre> <p>The first line imports the <code>ssl</code> module, which provides access to Transport Layer Security (TLS) and Secure Sockets Layer (SSL) cryptographic protocols. The second line sets the default SSL context to an unverified context. This is useful when you want to bypass SSL certificate verification for testing or development purposes.</p> <p>By default, Python's SSL context verifies the server's SSL certificate to ensure that the connection is secure. However, in some cases, such as when working with self-signed certificates or testing with a local server, you may want to disable certificate verification. This is where the <code>ssl._create_unverified_context()</code> method comes in handy. It creates an SSL context that does not verify the server's SSL certificate, allowing you to establish a connection even if the certificate is invalid or self-signed.</p>"},{"location":"install/","title":"Install","text":"<p>A list of software to install</p>"},{"location":"install/#python","title":"Python","text":"<ol> <li> <p>Go to Python 3.9.13 and download the Windows installer (64-bit).</p> </li> <li> <p>Execute the installer and make sure to check the box underneath that says Add Python 3.9 to path</p> <p></p> <p>Note</p> <p>If your username contains a space, use a location that doesn't spaces in it.</p> </li> <li> <p>Also Disable path length limit</p> <p></p> </li> </ol>"},{"location":"install/#visual-studio-code","title":"Visual Studio Code","text":"<ol> <li> <p>Go to Visual Studio Code and download VS Code.</p> </li> <li> <p>Select I accept the agreement to begin with.</p> <p></p> </li> <li> <p>Check all the boxes in the Other section</p> <p></p> </li> <li> <p>Then Install.</p> <p></p> </li> <li> <p>After installation, make sure to install two handy extensions.</p> <p>Look for Extensions on the left-hand panel and Search</p> <ul> <li>python</li> <li>indent-rainbow</li> </ul> <p></p> <p></p> </li> </ol>"},{"location":"install/#microsoft-c-build-tools","title":"Microsoft C++ Build Tools","text":"<ol> <li> <p>Go to Microsoft C++ Build Tools and download Build Tools.</p> </li> <li> <p>Check Desktop development with C++ then Install.</p> <p></p> </li> </ol>"},{"location":"install/#prover9-mace4","title":"Prover9-Mace4","text":"<ol> <li> <p>Go to Prover9-Mace4 v05 and download installer and patch file.</p> </li> <li> <p>Simply click Next all the way.</p> <p></p> </li> <li> <p>Then Install.</p> <p></p> </li> <li> <p>Copy and paste the patch file to <code>C:\\Program Files (x86)\\Prover9-Mace4</code>.</p> <p></p> </li> </ol>"},{"location":"install/#git","title":"Git","text":"<ol> <li> <p>Go to Git - Downloads and get installer.</p> </li> <li> <p>Simply click Next all the way.</p> <p></p> </li> <li> <p>Then Install.</p> <p></p> </li> </ol>"}]}